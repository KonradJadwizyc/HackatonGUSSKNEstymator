answer("C"),
answer("V"),
answer("G"),
incorrect = "Your answer is wrong :( ",
correct = cat("Great! You picked correc answer and erned",easy_pkt,"XP"),
allow_retry = F,
random_answer_order = TRUE)
question("Jaka jest pierwsz litera alfabetu?",
answer("A", correct = TRUE),
answer("C"),
answer("V"),
answer("G"),
incorrect = "Your answer is wrong :( ",
correct = easy_pkt,
allow_retry = F,
random_answer_order = TRUE)
question("Jaka jest pierwsz litera alfabetu?",
answer("A", correct = TRUE),
answer("C"),
answer("V"),
answer("G"),
incorrect = "Your answer is wrong :( ",
correct = easy_pkt,
allow_retry = F,
random_answer_order = TRUE)
Pytanie_1 <- question("Jaka jest pierwsz litera alfabetu?",
answer("A", correct = TRUE),
answer("C"),
answer("V"),
answer("G"),
incorrect = "Your answer is wrong :( ",
correct = "easy_pkt",
allow_retry = F,
random_answer_order = TRUE)
question("Jaka jest pierwsz litera alfabetu?",
answer("A", correct = TRUE),
answer("C"),
answer("V"),
answer("G"),
incorrect = "Your answer is wrong :( ",
correct = "easy_pkt",
allow_retry = F,
random_answer_order = TRUE)
question("Jaka jest pierwsz litera alfabetu?",
answer("A", correct = TRUE),
answer("C"),
answer("V"),
answer("G"),
incorrect = "Your answer is wrong :( ",
correct = "Great! You picked correc answer and erned ... XP"),
allow_retry = F,
random_answer_order = TRUE)
question("Która liczba jest najmniejsza?",
answer("13", correct = TRUE),
answer("17",),
answer("25",),
answer("50"),
incorrect = "Your answer is wrong :( ",
correct = "Great! You picked correc answer and erned ... XP",
allow_retry = F,
random_answer_order = TRUE)
question("Która liczba jest najmniejsza?",
answer("13", correct = TRUE),
answer("17",),
answer("25",),
answer("50"),
incorrect = "Your answer is wrong :( ",
correct = "Great! You picked correc answer and erned ... XP",
allow_retry = F,
random_answer_order = TRUE)
shiny::runApp()
shiny::runApp()
runApp()
install.packages("shinythemes")
runApp()
install.packages("shinyjs")
install.packages("shinyjs")
runApp('C:/Users/WOJCIE~1/AppData/Local/Temp')
runApp('C:/Users/WOJCIE~1/AppData/Local/Temp')
runApp('C:/Users/WOJCIE~1/AppData/Local/Temp')
install.packages("shinyQuiz")
library(shinyQuiz)
install.packages("shinyQuiz")
install.packages("dataquiz")
devtools::install_github("skranz/dataquiz")
devtools::install_github("skranz/dataquiz")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
modalDialog(
"What is your name?",
textInput("modalUserName",
label = "Name..."),
footer = div(actionButton(inputId = "done",
"Done",
style="color: #fff; background-color: #337ab7; border-color: #2e6da4"),
modalButton("Ignore")),
size = "m", # s, l
easyClose = T,
fade = T
),
modalDialog(
"Where are You from?",
textInput("modalUserCountry",
label = "Country..."),
footer = div(actionButton(inputId = "done_country",
"Done",
style="color: #fff; background-color: #337ab7; border-color: #2e6da4"),
modalButton("Ignore")),
size = "m", # s, l
easyClose = T,
fade = T
)
)
showModal(
modalDialog(
"What is your name?",
textInput("modalUserName",
label = "Name..."),
footer = div(actionButton(inputId = "done",
"Done",
style="color: #fff; background-color: #337ab7; border-color: #2e6da4"),
modalButton("Ignore")),
size = "m", # s, l
easyClose = T,
fade = T
),
modalDialog(
"Where are You from?",
textInput("modalUserCountry",
label = "Country..."),
footer = div(actionButton(inputId = "done_country",
"Done",
style="color: #fff; background-color: #337ab7; border-color: #2e6da4"),
modalButton("Ignore")),
size = "m", # s, l
easyClose = T,
fade = T
)
)
modalStartName <- reactiveValues(name="Dear user")
modalStartCountry <- reactiveValues(country="Wasteland")
showModal(
modalDialog(
"What is your name?",
textInput("modalUserName",
label = "Name..."),
footer = div(actionButton(inputId = "done",
"Done",
style="color: #fff; background-color: #337ab7; border-color: #2e6da4"),
modalButton("Ignore")),
size = "m", # s, l
easyClose = T,
fade = T
),
modalDialog(
"Where are You from?",
textInput("modalUserCountry",
label = "Country..."),
footer = div(actionButton(inputId = "done_country",
"Done",
style="color: #fff; background-color: #337ab7; border-color: #2e6da4"),
modalButton("Ignore")),
size = "m", # s, l
easyClose = T,
fade = T
)
)
observe({
showModal(
modalDialog(
"What is your name?",
textInput("modalUserName",
label = "Name..."),
footer = div(actionButton(inputId = "done",
"Done",
style="color: #fff; background-color: #337ab7; border-color: #2e6da4"),
modalButton("Ignore")),
size = "m", # s, l
easyClose = T,
fade = T
),
modalDialog(
"Where are You from?",
textInput("modalUserCountry",
label = "Country..."),
footer = div(actionButton(inputId = "done_country",
"Done",
style="color: #fff; background-color: #337ab7; border-color: #2e6da4"),
modalButton("Ignore")),
size = "m", # s, l
easyClose = T,
fade = T
)
)
})
observeEvent(input$done, {
modalStartName$name <- input$modalUserName
removeModal()
})
observeEvent(input$done_country, {
modalStartCountry$country <- input$modalUserCountry
removeModal()
})
output$modalName <- renderText({ modalStartName$name})
output$modalCountry <- renderText({ modalStartCountry$country})
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
install.packages("shiny.i18n")
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?disable
runApp()
runApp()
?toggleState
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
exp_df <- data.frame()
exp_df$user_exp <- NA
View(exp_df)
iris
str(iris)
exp_df <- data.frame(u_exp,b_ans,g_ans)
?data.frame
u_exp <- NULL
b_ans <- NULL
g_ans <- NULL
exp_df <- data.frame(u_exp,b_ans,g_ans)
View(exp_df)
View(exp_df)
exp_df <- data.frame(u_exp,b_ans,g_ans)
exp_df$u_exp <- NA
u_exp <- NA
b_ans <- NULL
g_ans <- NULL
exp_df <- data.frame(u_exp,b_ans,g_ans)
View(exp_df)
View(exp_df)
exp_df <- data.frame(u_exp =0,b_ans,g_ans,)
exp_df <- data.frame(u_exp =0,b_ans,g_ans,)
exp_df <- data.frame(u_exp = 0,b_ans = 0,g_ans = 0)
View(exp_df)
View(exp_df)
exp_df <- data.frame(u_exp = NA,b_ans = NA,g_ans = NA)
View(exp_df)
View(exp_df)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(exp_df)
View(exp_df)
exp_df$u_exp <- 50
View(exp_df)
View(exp_df)
shiny::runApp()
runApp()
q()
shiny::runApp()
runApp()
rm("exp_df")
My_exp <- readRDS("exp.rds")
My_exp <- readRDS("exp")
My_exp <- readRDS("exp.rds")
runApp()
My_exp <- readRDS("exp.rds")
My_exp <- readRDS("exp")
My_exp <- readRDS("exp.RData")
readRDS("exp.rds")
runApp()
runApp()
runApp()
runApp()
expand.model.frame(
exp_df
exp_dp
exp_df
readRDS("exp.rds")
readRDS("exp.rds")
exp <- readRDS("C:/Users/Wojciech Dopieralski/Desktop/R/GUShackaton/HackatonGUSSKNEstymator/exp.rds")
shiny::runApp()
readRDS("exp.rds")
readRDS("exp.rds")
?readRDS
readRDS("exp.rds", compress = TRUE)
readRDS("exp.rds", refhook = TRUE)
expo <- readRDS("exp.rds")
View(expo)
View(expo)
rm("expo")
runApp()
runApp()
expo <- readRDS("exp.rds")
View(expo)
View(expo)
runApp()
runApp()
expo <- readRDS("exp.rds")
View(expo)
View(expo)
rm(expo)
expo <- readRDS("exp.rds")
View(expo)
View(expo)
rm(expo)
runApp()
runApp()
View(exp_df)
View(exp_df)
rm(exp_df)
runApp()
runApp()
runApp()
expo <- readRDS("inputs.RDS")
runApp()
expo <- readRDS("inputs.RDS")
View(expo)
View(expo)
?reactiveValuesToList
rm("expo")
runApp()
expo <- readRDS("inputs.RDS")
View(expo)
View(expo)
rm(expo)
runApp()
runApp()
runApp()
runApp()
runApp()
?as.data.frame
runApp()
runApp()
runApp()
runApp()
expo <- readRDS("inputs.RDS")
expo <- readRDS("exp.RDS")
View(expo)
View(expo)
?colnames
rm(expo)
?saverds
saveRDS
?saveRDS
runApp()
runApp()
test_1 <- readRDS("exp.RDS")
View(test_1)
View(test_1)
rm(test_1)
runApp()
#Funkcja, ktora odpalamy z poziomu kodu w celu przetestowania czy nasze zapisywanie dziala
test_1 <- readRDS("user_score.RDS")
View(test_1)
View(test_1)
rm(test_1)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
#testing that saving files is working fine. This should be comented if we wanna app to work ;)
test_1 <- readRDS("user_score.RDS")
View(test_1)
View(test_1)
rm(test_1)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
